// Generated by CoffeeScript 1.3.3

/* 
	PantaRhei.js v 0.0.1
	
	(c) 2012 Federico Weber
	distributed under the MIT license.
	federicoweber](http://federicoweber.com)
*/


(function() {
  var Backbone, Flow, PantaRhei, VERSION, Worker, root, _;

  root = this;

  PantaRhei = {};

  if ((typeof exports !== "undefined" && exports !== null)) {
    PantaRhei = exports;
    _ = require('underscore');
    Backbone = require('backbone');
  }

  if (root.Backbone != null) {
    Backbone = root.Backbone;
    _ = root._;
  }

  if (Backbone === void 0) {
    throw "Please import Backbone to use this library";
  }

  root.PantaRhei = PantaRhei;

  VERSION = PantaRhei.VERSION = "0.0.1";

  Flow = PantaRhei.Flow = (function() {

    function Flow(id, _queue) {
      this.id = id != null ? id : _.uniqueId('flow_');
      this._queue = _queue != null ? _queue : new Array();
      this._currentWorker = {};
      return this;
    }

    Flow.prototype.use = function(worker) {
      if (_.isFunction(worker.run) || _.isFunction(worker)) {
        return this._queue.push(worker);
      } else {
        throw new Error("Provide a proper worker");
        return this;
      }
    };

    Flow.prototype.run = function(shared) {
      this.shared = shared != null ? shared : {};
      if (this._queue.length === 0) {
        throw new Error("The workers queue is empty");
      } else {
        this._paused = false;
        this._queue.reverse();
        this.trigger('run', this.shared);
        this._next();
      }
      return this;
    };

    Flow.prototype.pause = function() {
      this._paused = true;
      this.trigger('pause', this.shared);
      return this;
    };

    Flow.prototype.resume = function() {
      this._paused = false;
      this.trigger('resume', this.shared);
      this._next();
      return this;
    };

    Flow.prototype.kill = function() {
      return this;
    };

    Flow.prototype._next = function(error) {
      var cNext;
      if (this._currentWorker && _.isFunction(this._currentWorker.kill)) {
        this._currentWorker.kill();
      }
      if (error) {
        this.pause();
        return this.trigger('error', error);
      } else if (this._queue.length > 0) {
        this._currentWorker = this._queue.pop();
        if (this._currentWorker && _.isFunction(this._currentWorker.run)) {
          cNext = _.bind(this._next, this);
          return this._currentWorker.run(error, this.shared, cNext);
        } else if (this._currentWorker && _.isFunction(this._currentWorker)) {
          cNext = _.bind(this._next, this);
          return this._currentWorker(error, this.shared, cNext);
        } else {
          throw new Error("The " + this._currentWorker.id + " worker does not provide a run method");
        }
      } else {
        return this.trigger('complete', this.shared);
      }
    };

    return Flow;

  })();

  _.extend(Flow.prototype, Backbone.Events);

  Worker = PantaRhei.Worker = (function() {

    function Worker(id) {
      this.id = id != null ? id : _.uniqueId('worker_');
    }

    Worker.prototype.run = function(shared, next) {
      this.shared = shared;
      this.next = next;
      return this.next(new Error('run must be overridden'));
    };

    Worker.prototype.kill = function() {
      throw new ReferenceError("kill must be overridden ");
    };

    return Worker;

  })();

  _.extend(Worker.prototype, Backbone.Events);

  Flow.extend = Worker.extend = Backbone.View.extend;

}).call(this);
